{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\*\generator Riched20 10.0.15063}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9  aNearly every VCS has some form of branching support. Branching means you diverge from the main line of development and continue to do work without messing with that main line. In many VCS tools, this is a somewhat expensive process, often requiring you to create a new copy of your source code directory, which can take a long time for large projects.\par
\par
Some people refer to Git\rquote s branching model as its \ldblquote killer feature,\rdblquote  and it certainly sets Git apart in the VCS community. Why is it so special? The way Git branches is incredibly lightweight, making branching operations nearly instantaneous, and switching back and forth between branches generally just as fast. Unlike many other VCSs, Git encourages workflows that branch and merge often, even multiple times in a day. Understanding and mastering this feature gives you a powerful and unique tool and can entirely change the way that you develop.\par
\par
Branches in a Nutshell\par
To really understand the way Git does branching, we need to take a step back and examine how Git stores its data.\par
\par
As you may remember from Getting Started, Git doesn\rquote t store data as a series of changesets or differences, but instead as a series of snapshots.\par
\par
When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged. This object also contains the author\rquote s name and email, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.\par
\par
To visualize this, let\rquote s assume that you have a directory containing three files, and you stage them all and commit. Staging the files computes a checksum for each one (the SHA-1 hash we mentioned in Getting Started), stores that version of the file in the Git repository (Git refers to them as blobs), and adds that checksum to the staging area:\par
\par
$ git add README test.rb LICENSE\par
$ git commit -m 'The initial commit of my project'\par
When you create the commit by running git commit, Git checksums each subdirectory (in this case, just the root project directory) and stores those tree objects in the Git repository. Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.\par
\par
Your Git repository now contains five objects: one blob for the contents of each of your three files, one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and one commit with the pointer to that root tree and all the commit metadata.\par
\par
A commit and its tree.\par
Figure 9. A commit and its tree\par
If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.\par
\par
Commits and their parents.\par
Figure 10. Commits and their parents\par
A branch in Git is simply a lightweight movable pointer to one of these commits. The default branch name in Git is master. As you start making commits, you\rquote re given a master branch that points to the last commit you made. Every time you commit, it moves forward automatically.\par
\par
Note\par
The \ldblquote master\rdblquote  branch in Git is not a special branch. It is exactly like any other branch. The only reason nearly every repository has one is that the git init command creates it by default and most people don\rquote t bother to change it.\par
\par
A branch and its commit history.\par
Figure 11. A branch and its commit history\par
Creating a New Branch\par
What happens if you create a new branch? Well, doing so creates a new pointer for you to move around. Let\rquote s say you create a new branch called testing. You do this with the git branch command:\par
\par
$ git branch testing\par
This creates a new pointer to the same commit you\rquote re currently on.\par
\par
Two branches pointing into the same series of commits.\par
Figure 12. Two branches pointing into the same series of commits\par
How does Git know what branch you\rquote re currently on? It keeps a special pointer called HEAD. Note that this is a lot different than the concept of HEAD in other VCSs you may be used to, such as Subversion or CVS. In Git, this is a pointer to the local branch you\rquote re currently on. In this case, you\rquote re still on master. The git branch command only created a new branch\f1\u8201?\emdash\u8201?it didn\rquote t switch to that branch.\par
\par
HEAD pointing to a branch.\par
Figure 13. HEAD pointing to a branch\par
You can easily see this by running a simple git log command that shows you where the branch pointers are pointing. This option is called --decorate.\par
\par
$ git log --oneline --decorate\par
f30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface\par
34ac2 Fixed bug #1328 - stack overflow under certain conditions\par
98ca9 The initial commit of my project\par
You can see the \ldblquote master\rdblquote  and \ldblquote testing\rdblquote  branches that are right there next to the f30ab commit.\par
\par
Switching Branches\par
To switch to an existing branch, you run the git checkout command. Let\rquote s switch to the new testing branch:\par
\par
$ git checkout testing\par
This moves HEAD to point to the testing branch.\par
\par
HEAD points to the current branch.\par
Figure 14. HEAD points to the current branch\par
What is the significance of that? Well, let\rquote s do another commit:\par
\par
$ vim test.rb\par
$ git commit -a -m 'made a change'\par
The HEAD branch moves forward when a commit is made.\par
Figure 15. The HEAD branch moves forward when a commit is made\par
This is interesting, because now your testing branch has moved forward, but your master branch still points to the commit you were on when you ran git checkout to switch branches. Let\rquote s switch back to the master branch:\par
\par
$ git checkout master\par
HEAD moves when you checkout.\par
Figure 16. HEAD moves when you checkout\par
That command did two things. It moved the HEAD pointer back to point to the master branch, and it reverted the files in your working directory back to the snapshot that master points to. This also means the changes you make from this point forward will diverge from an older version of the project. It essentially rewinds the work you\rquote ve done in your testing branch so you can go in a different direction.\par
\par
Note\par
Switching branches changes files in your working directory\par
It\rquote s important to note that when you switch branches in Git, files in your working directory will change. If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch. If Git cannot do it cleanly, it will not let you switch at all.\par
\par
Let\rquote s make a few changes and commit again:\par
\par
$ vim test.rb\par
$ git commit -a -m 'made other changes'\par
Now your project history has diverged (see Divergent history). You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work. Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you\rquote re ready. And you did all that with simple branch, checkout, and commit commands.\par
\par
Divergent history.\par
Figure 17. Divergent history\par
You can also see this easily with the git log command. If you run git log --oneline --decorate --graph --all it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.\par
\par
$ git log --oneline --decorate --graph --all\par
* c2b9e (HEAD, master) made other changes\par
| * 87ab2 (testing) made a change\par
|/\par
* f30ab add feature #32 - ability to add new formats to the\par
* 34ac2 fixed bug #1328 - stack overflow under certain conditions\par
* 98ca9 initial commit of my project\par
Because a branch in Git is actually a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy. Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).\par
\par
This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project\rquote s files into a second directory. This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous. Also, because we\rquote re recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do. These features help encourage developers to create and use branches often.\par
\par
Let\rquote s see why you should do so\f0\par
}
 